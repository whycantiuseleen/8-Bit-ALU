/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_8_3 (
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] alu,
    output reg v,
    output reg n,
    output reg z,
    output reg overflow
  );
  
  
  
  wire [8-1:0] M_shift_out;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shifter_9 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .out(M_shift_out)
  );
  
  wire [8-1:0] M_cmpr_cmp_final;
  reg [6-1:0] M_cmpr_alufn;
  reg [8-1:0] M_cmpr_a;
  reg [8-1:0] M_cmpr_b;
  comparable_10 cmpr (
    .alufn(M_cmpr_alufn),
    .a(M_cmpr_a),
    .b(M_cmpr_b),
    .cmp_final(M_cmpr_cmp_final)
  );
  
  wire [8-1:0] M_bool_boole;
  reg [6-1:0] M_bool_alufn;
  reg [8-1:0] M_bool_a;
  reg [8-1:0] M_bool_b;
  boolean_11 bool (
    .alufn(M_bool_alufn),
    .a(M_bool_a),
    .b(M_bool_b),
    .boole(M_bool_boole)
  );
  
  wire [8-1:0] M_adder_final_sum;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  wire [1-1:0] M_adder_overflow;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adderOrSubtractor_12 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .final_sum(M_adder_final_sum),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n),
    .overflow(M_adder_overflow)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_cmpr_alufn = alufn;
    M_cmpr_a = a;
    M_cmpr_b = b;
    M_shift_a = a;
    M_shift_b = b;
    M_shift_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_adder_final_sum;
      end
      2'h1: begin
        alu = M_bool_boole;
      end
      2'h2: begin
        alu = M_shift_out;
      end
      2'h3: begin
        alu = M_cmpr_cmp_final;
      end
      default: begin
        alu = 8'h00;
      end
    endcase
    v = M_adder_v;
    n = M_adder_n;
    z = M_adder_z;
    overflow = M_adder_v;
  end
endmodule
