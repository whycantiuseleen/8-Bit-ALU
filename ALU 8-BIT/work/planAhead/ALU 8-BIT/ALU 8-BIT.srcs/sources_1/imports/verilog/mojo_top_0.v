/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [28:0] M_ctr_d, M_ctr_q = 1'h0;
  wire [3-1:0] M_myCounter_value;
  counter_2 myCounter (
    .clk(clk),
    .rst(rst),
    .value(M_myCounter_value)
  );
  localparam IDLE_state = 5'd0;
  localparam ADDERTEST1_state = 5'd1;
  localparam ADDERTEST1OVF_state = 5'd2;
  localparam ADDERTEST2_state = 5'd3;
  localparam ADDERTEST2OVF_state = 5'd4;
  localparam ADDERTEST3_state = 5'd5;
  localparam ADDERTEST4_state = 5'd6;
  localparam ADDERERROR_state = 5'd7;
  localparam ADDERERRORTEST_state = 5'd8;
  localparam BOOLEANTEST1_state = 5'd9;
  localparam BOOLEANTEST2_state = 5'd10;
  localparam BOOLEANTEST3_state = 5'd11;
  localparam BOOLEANTEST4_state = 5'd12;
  localparam BOOLEANERROR_state = 5'd13;
  localparam BOOLEANERRORTEST_state = 5'd14;
  localparam COMPARABLETEST1_state = 5'd15;
  localparam COMPARABLETEST1F_state = 5'd16;
  localparam COMPARABLETEST2_state = 5'd17;
  localparam COMPARABLETEST2F_state = 5'd18;
  localparam COMPARABLETEST3_state = 5'd19;
  localparam COMPARABLETEST3F_state = 5'd20;
  localparam COMPARABLEERROR_state = 5'd21;
  localparam COMPARABLEERRORTEST_state = 5'd22;
  localparam SHIFTERTEST1_state = 5'd23;
  localparam SHIFTERTEST2_state = 5'd24;
  localparam SHIFTERTEST3_state = 5'd25;
  localparam SHIFTERERROR_state = 5'd26;
  localparam SHIFTERERRORTEST_state = 5'd27;
  localparam END_state = 5'd28;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  
  reg [5:0] alufn;
  
  reg [7:0] a;
  
  reg [7:0] b;
  
  reg [7:0] alu;
  
  localparam X = 5'h1c;
  
  wire [8-1:0] M_aluI_alu;
  wire [1-1:0] M_aluI_v;
  wire [1-1:0] M_aluI_n;
  wire [1-1:0] M_aluI_z;
  wire [1-1:0] M_aluI_overflow;
  reg [8-1:0] M_aluI_a;
  reg [8-1:0] M_aluI_b;
  reg [6-1:0] M_aluI_alufn;
  alu_8_3 aluI (
    .a(M_aluI_a),
    .b(M_aluI_b),
    .alufn(M_aluI_alufn),
    .alu(M_aluI_alu),
    .v(M_aluI_v),
    .n(M_aluI_n),
    .z(M_aluI_z),
    .overflow(M_aluI_overflow)
  );
  
  wire [4-1:0] M_dec3_out0;
  wire [4-1:0] M_dec3_out1;
  wire [4-1:0] M_dec3_out2;
  reg [8-1:0] M_dec3_a;
  decimal32_4 dec3 (
    .a(M_dec3_a),
    .out0(M_dec3_out0),
    .out1(M_dec3_out1),
    .out2(M_dec3_out2)
  );
  
  wire [7-1:0] M_seven_seg0_segs;
  reg [4-1:0] M_seven_seg0_char;
  seven_seg_5 seven_seg0 (
    .char(M_seven_seg0_char),
    .segs(M_seven_seg0_segs)
  );
  
  wire [7-1:0] M_seven_seg1_segs;
  reg [4-1:0] M_seven_seg1_char;
  seven_seg_5 seven_seg1 (
    .char(M_seven_seg1_char),
    .segs(M_seven_seg1_segs)
  );
  
  wire [7-1:0] M_seven_seg2_segs;
  reg [4-1:0] M_seven_seg2_char;
  seven_seg_5 seven_seg2 (
    .char(M_seven_seg2_char),
    .segs(M_seven_seg2_segs)
  );
  
  wire [7-1:0] M_seven_seg3_segs;
  reg [4-1:0] M_seven_seg3_char;
  seven_seg_5 seven_seg3 (
    .char(M_seven_seg3_char),
    .segs(M_seven_seg3_segs)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_ctr_d = M_ctr_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    led[7+0-:1] = M_aluI_overflow;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    a = io_dip[0+7-:8];
    b = io_dip[8+7-:8];
    alufn = io_dip[16+7-:8];
    M_aluI_a = $signed(a);
    M_aluI_b = $signed(b);
    M_aluI_alufn = alufn;
    alu = M_aluI_alu;
    io_led[16+7-:8] = alu;
    io_led[8+7-:8] = io_dip[8+7-:8];
    io_led[0+7-:8] = io_dip[0+7-:8];
    M_dec3_a = alu;
    if (M_aluI_overflow == 1'h1) begin
      M_seven_seg0_char = 4'hd;
      M_seven_seg1_char = 4'hd;
      M_seven_seg2_char = 4'hd;
      M_seven_seg3_char = 4'hd;
    end else begin
      M_seven_seg0_char = M_dec3_out0;
      M_seven_seg1_char = M_dec3_out1;
      M_seven_seg2_char = M_dec3_out2;
      M_seven_seg3_char = 4'hf;
    end
    
    case (M_state_q)
      IDLE_state: begin
        M_ctr_d = 1'h0;
        if (io_button[1+0-:1] == 1'h1) begin
          M_state_d = ADDERTEST1_state;
        end
      end
      ADDERTEST1_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h00;
        M_aluI_a = 8'h07;
        M_aluI_b = 8'h17;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h07;
        io_led[8+7-:8] = 8'h17;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h1e) begin
            M_state_d = ADDERTEST1OVF_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST1OVF_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h00;
        M_aluI_a = 8'h40;
        M_aluI_b = 8'h42;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h40;
        io_led[8+7-:8] = 8'h42;
        M_ctr_d = M_ctr_q + 1'h1;
        M_seven_seg0_char = 4'hd;
        M_seven_seg1_char = 4'hd;
        M_seven_seg2_char = 4'hd;
        M_seven_seg3_char = 4'hd;
        led[7+0-:1] = M_aluI_overflow;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h82) begin
            M_state_d = ADDERTEST2_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST2_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h01;
        M_aluI_a = 8'h0a;
        M_aluI_b = 8'h04;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h0a;
        io_led[8+7-:8] = 8'h04;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h06) begin
            M_state_d = ADDERTEST2OVF_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST2OVF_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h01;
        M_aluI_a = 8'h9c;
        M_aluI_b = 8'h3c;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h9c;
        io_led[8+7-:8] = 8'h3c;
        M_ctr_d = M_ctr_q + 1'h1;
        M_seven_seg0_char = 4'hd;
        M_seven_seg1_char = 4'hd;
        M_seven_seg2_char = 4'hd;
        M_seven_seg3_char = 4'hd;
        led[7+0-:1] = M_aluI_overflow;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h60) begin
            M_state_d = ADDERTEST3_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST3_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h02;
        M_aluI_a = 8'h04;
        M_aluI_b = 8'h02;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h04;
        io_led[8+7-:8] = 8'h02;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h08) begin
            M_state_d = ADDERTEST4_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERTEST4_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h03;
        M_aluI_a = 8'h41;
        M_aluI_b = 8'h08;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h41;
        io_led[8+7-:8] = 8'h08;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h01) begin
            M_state_d = ADDERERRORTEST_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERERRORTEST_state: begin
        M_seven_seg3_char = 4'ha;
        M_aluI_alufn = 6'h00;
        M_aluI_a = 8'h07;
        M_aluI_b = 8'h17;
        alu = M_aluI_alu + 1'h1;
        io_led[0+7-:8] = 8'h07;
        io_led[8+7-:8] = 8'h17;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h1e) begin
            M_state_d = BOOLEANTEST1_state;
          end else begin
            M_state_d = ADDERERROR_state;
          end
        end
      end
      ADDERERROR_state: begin
        M_seven_seg3_char = 4'ha;
        M_seven_seg0_char = 4'hb;
        M_seven_seg1_char = 4'hb;
        M_seven_seg2_char = 4'he;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          M_state_d = BOOLEANTEST1_state;
        end
      end
      BOOLEANTEST1_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 4'h8;
        M_aluI_alufn = 6'h18;
        M_aluI_a = 8'h96;
        M_aluI_b = 8'h55;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h96;
        io_led[8+7-:8] = 8'h55;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h14) begin
            M_state_d = BOOLEANTEST2_state;
          end else begin
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST2_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 4'h8;
        M_aluI_alufn = 6'h1e;
        M_aluI_a = 8'h96;
        M_aluI_b = 8'h55;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h96;
        io_led[8+7-:8] = 8'h55;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'hd7) begin
            M_state_d = BOOLEANTEST3_state;
          end else begin
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST3_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 4'h8;
        M_aluI_alufn = 6'h16;
        M_aluI_a = 8'h96;
        M_aluI_b = 8'h55;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h96;
        io_led[8+7-:8] = 8'h55;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'hc3) begin
            M_state_d = BOOLEANTEST4_state;
          end else begin
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANTEST4_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 4'h8;
        M_aluI_alufn = 6'h1a;
        M_aluI_a = 8'h96;
        M_aluI_b = 8'h55;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h96;
        io_led[8+7-:8] = 8'h55;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h96) begin
            M_state_d = BOOLEANERRORTEST_state;
          end else begin
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANERRORTEST_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 4'h8;
        M_aluI_alufn = 6'h18;
        M_aluI_a = 8'h96;
        M_aluI_b = 8'h55;
        alu = M_aluI_alu + 1'h1;
        io_led[0+7-:8] = 8'h96;
        io_led[8+7-:8] = 8'h55;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h14) begin
            M_state_d = COMPARABLETEST1_state;
          end else begin
            M_state_d = BOOLEANERROR_state;
          end
        end
      end
      BOOLEANERROR_state: begin
        M_seven_seg3_char = 4'h8;
        M_seven_seg0_char = 4'hb;
        M_seven_seg1_char = 4'hb;
        M_seven_seg2_char = 4'he;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          M_state_d = COMPARABLETEST1_state;
        end
      end
      COMPARABLETEST1_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h33;
        M_aluI_a = 8'hb9;
        M_aluI_b = 8'hb9;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hb9;
        io_led[8+7-:8] = 8'hb9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h01) begin
            M_state_d = COMPARABLETEST1F_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLETEST1F_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h33;
        M_aluI_a = 8'h01;
        M_aluI_b = 8'h02;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h01;
        io_led[8+7-:8] = 8'h02;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h00) begin
            M_state_d = COMPARABLETEST2_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLETEST2_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h35;
        M_aluI_a = 8'hb9;
        M_aluI_b = 8'hf9;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hb9;
        io_led[8+7-:8] = 8'hf9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h01) begin
            M_state_d = COMPARABLETEST2F_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLETEST2F_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h35;
        M_aluI_a = 8'hbd;
        M_aluI_b = 8'hb9;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hbd;
        io_led[8+7-:8] = 8'hb9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h00) begin
            M_state_d = COMPARABLETEST3_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLETEST3_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h37;
        M_aluI_a = 8'hb9;
        M_aluI_b = 8'hb9;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hb9;
        io_led[8+7-:8] = 8'hb9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h01) begin
            M_state_d = COMPARABLETEST3F_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLETEST3F_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h37;
        M_aluI_a = 8'hbb;
        M_aluI_b = 8'hb9;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hbb;
        io_led[8+7-:8] = 8'hb9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h00) begin
            M_state_d = COMPARABLEERRORTEST_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLEERRORTEST_state: begin
        M_seven_seg3_char = 4'hc;
        M_aluI_alufn = 6'h37;
        M_aluI_a = 8'hbb;
        M_aluI_b = 8'hb9;
        alu = M_aluI_alu + 1'h1;
        io_led[0+7-:8] = 8'hbb;
        io_led[8+7-:8] = 8'hb9;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h00) begin
            M_state_d = COMPARABLEERRORTEST_state;
          end else begin
            M_state_d = COMPARABLEERROR_state;
          end
        end
      end
      COMPARABLEERROR_state: begin
        M_seven_seg3_char = 4'hc;
        M_seven_seg0_char = 4'hb;
        M_seven_seg1_char = 4'hb;
        M_seven_seg2_char = 4'he;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          M_state_d = SHIFTERTEST1_state;
        end
      end
      SHIFTERTEST1_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 7'h3f;
        M_aluI_alufn = 6'h20;
        M_aluI_a = 8'h0f;
        M_aluI_b = 8'h04;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h04;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'hf0) begin
            M_state_d = SHIFTERTEST2_state;
          end else begin
            M_state_d = SHIFTERERROR_state;
          end
        end
      end
      SHIFTERTEST2_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 7'h3f;
        M_aluI_alufn = 6'h21;
        M_aluI_a = 8'h0f;
        M_aluI_b = 8'h03;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h03;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'h01) begin
            M_state_d = SHIFTERTEST3_state;
          end else begin
            M_state_d = SHIFTERERROR_state;
          end
        end
      end
      SHIFTERTEST3_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 7'h3f;
        M_aluI_alufn = 6'h23;
        M_aluI_a = 8'hb0;
        M_aluI_b = 8'h02;
        alu = M_aluI_alu;
        io_led[0+7-:8] = 8'hb0;
        io_led[8+7-:8] = 8'h02;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'hb0) begin
            M_state_d = SHIFTERERRORTEST_state;
          end else begin
            M_state_d = SHIFTERERROR_state;
          end
        end
      end
      SHIFTERERRORTEST_state: begin
        M_seven_seg0_char = 7'h3f;
        M_seven_seg1_char = 7'h3f;
        M_seven_seg2_char = 7'h3f;
        M_seven_seg3_char = 7'h3f;
        M_aluI_alufn = 6'h23;
        M_aluI_a = 8'h0f;
        M_aluI_b = 8'h03;
        alu = M_aluI_alu + 1'h1;
        io_led[0+7-:8] = 8'h0f;
        io_led[8+7-:8] = 8'h03;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          if (alu == 8'he1) begin
            M_state_d = END_state;
          end else begin
            M_state_d = SHIFTERERROR_state;
          end
        end
      end
      SHIFTERERROR_state: begin
        M_seven_seg3_char = 4'h5;
        M_seven_seg0_char = 4'hb;
        M_seven_seg1_char = 4'hb;
        M_seven_seg2_char = 4'he;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          M_state_d = END_state;
        end
      end
      END_state: begin
        M_seven_seg3_char = 4'hf;
        M_seven_seg0_char = 4'he;
        M_seven_seg1_char = 4'hc;
        M_seven_seg2_char = 4'ha;
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q[28+0-:1] == 1'h1) begin
          M_ctr_d = 1'h0;
          M_state_d = IDLE_state;
        end
      end
    endcase
    
    case (M_myCounter_value)
      1'h0: begin
        io_seg = ~M_seven_seg0_segs;
        io_sel = 4'he;
      end
      1'h1: begin
        io_seg = ~M_seven_seg1_segs;
        io_sel = 4'hd;
      end
      2'h2: begin
        io_seg = ~M_seven_seg2_segs;
        io_sel = 4'hb;
      end
      2'h3: begin
        io_seg = ~M_seven_seg3_segs;
        io_sel = 4'h7;
      end
      default: begin
        io_seg = ~M_seven_seg0_segs;
        io_sel = 4'he;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ctr_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_ctr_q <= M_ctr_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
